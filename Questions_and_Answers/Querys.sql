/* 
 * Danny's Diner
 * Case Study #1 Questions
 *  
*/

-- 1. What is the total amount each customer spent at the restaurant?

SELECT 
    CUSTOMER_ID, 
    SUM(ORDERS * PRICE)AS TOTAL_AMOUNT 
FROM 
    (SELECT 
        CUSTOMER_ID,
        COUNT(ORDER_DATE) AS ORDERS,
        PRODUCT_NAME,
        PRICE
    FROM SALES AS S INNER JOIN MENU AS M ON S.PRODUCT_ID= M.PRODUCT_ID
    GROUP BY CUSTOMER_ID, PRODUCT_NAME, PRICE) AS T
GROUP BY CUSTOMER_ID

--OR

SELECT 
    CUSTOMER_ID, 
    SUM(PRICE) AS TOTAL_AMOUNT
FROM
    SALES AS S INNER JOIN MENU AS M ON S.PRODUCT_ID= M.PRODUCT_ID
GROUP BY CUSTOMER_ID
ORDER BY CUSTOMER_ID DESC;


-- 2. How many days has each customer visited the restaurant?

SELECT 
    CUSTOMER_ID, 
    COUNT (DISTINCT(ORDER_DATE)) AS DAYS_VISITED
FROM 
    SALES
GROUP BY CUSTOMER_ID 

-- 3. What was the first item from the menu purchased by each customer?

SELECT 
    CUSTOMER_ID, 
    PRODUCT_NAME, 
    ORDER_DATE
FROM SALES AS SS INNER JOIN MENU AS MM ON SS.PRODUCT_ID = MM.PRODUCT_ID
WHERE ORDER_DATE = (SELECT MIN(ORDER_DATE)
                    FROM Sales
                    WHERE CUSTOMER_ID = CUSTOMER_ID)
GROUP BY CUSTOMER_ID, PRODUCT_NAME, ORDER_DATE
ORDER BY CUSTOMER_ID

--4. What is the most purchased item on the menu and how many times was it purchased by all customers?
SELECT
    TOP 1 COUNT(S.PRODUCT_ID) AS TOTAL_ORDER,
    PRODUCT_NAME
FROM    
    SALES AS S INNER JOIN MENU AS M ON  S.PRODUCT_ID=M.PRODUCT_ID
GROUP BY PRODUCT_NAME
ORDER BY TOTAL_ORDER DESC


--5. Which item was the most popular for each customer?

SELECT 
    T.CUSTOMER_ID, 
    T.PRODUCT_NAME, 
    T.ORDER_COUNT AS TOTAL_ORDER
FROM 
    (SELECT 
        S.CUSTOMER_ID, 
        M.PRODUCT_NAME, 
        COUNT(*) AS ORDER_COUNT
    FROM 
        SALES AS S
    INNER JOIN 
        MENU AS M ON S.PRODUCT_ID = M.PRODUCT_ID 
    GROUP BY 
        S.CUSTOMER_ID, 
        M.PRODUCT_NAME) AS T
INNER JOIN 
    (SELECT 
        CUSTOMER_ID, 
        MAX(ORDER_COUNT) AS MAX_ORDER_COUNT
    FROM 
        (SELECT 
            S.CUSTOMER_ID, 
            COUNT(S.PRODUCT_ID) AS ORDER_COUNT
        FROM 
            SALES AS S
        GROUP BY 
            S.CUSTOMER_ID, 
            S.PRODUCT_ID) AS Q
    GROUP BY 
        CUSTOMER_ID) AS U
ON 
    T.CUSTOMER_ID = U.CUSTOMER_ID AND T.ORDER_COUNT = U.MAX_ORDER_COUNT
ORDER BY T.ORDER_COUNT DESC

-- OR

WITH customer_orders AS (
    SELECT
        S.CUSTOMER_ID,
        M.PRODUCT_NAME,
        COUNT(*) AS ORDER_COUNT
    FROM
        SALES AS S
        INNER JOIN MENU AS M ON S.PRODUCT_ID = M.PRODUCT_ID
    GROUP BY
        S.CUSTOMER_ID,
        M.PRODUCT_NAME
),
max_orders AS (
    SELECT
        CUSTOMER_ID,
        MAX(ORDER_COUNT) AS MAX_ORDER_COUNT
    FROM
        customer_orders
    GROUP BY
        CUSTOMER_ID
)
SELECT
    T.CUSTOMER_ID,
    T.PRODUCT_NAME,
    T.ORDER_COUNT AS TOTAL_ORDER
FROM
    customer_orders AS T
    INNER JOIN max_orders AS U
        ON T.CUSTOMER_ID = U.CUSTOMER_ID AND T.ORDER_COUNT = U.MAX_ORDER_COUNT
ORDER BY
    T.ORDER_COUNT DESC

-- 6. Which item was purchased first by the customer after they became a member?

SELECT 
  M.CUSTOMER_ID, 
  S.ORDER_DATE, 
  MENU.PRODUCT_NAME
FROM 
  MEMBERS M 
  JOIN SALES S ON M.CUSTOMER_ID = S.CUSTOMER_ID 
  JOIN MENU ON S.PRODUCT_ID = MENU.PRODUCT_ID
WHERE 
  S.ORDER_DATE > M.JOIN_DATE
  AND S.ORDER_DATE = (
    SELECT 
      MIN(ORDER_DATE) 
    FROM 
      SALES 
    WHERE 
      CUSTOMER_ID = M.CUSTOMER_ID 
      AND ORDER_DATE > M.JOIN_DATE
  )
ORDER BY 
  M.CUSTOMER_ID

-- OR 
WITH CTE AS (
    SELECT
    M.CUSTOMER_ID,
    S.ORDER_DATE,
    MENU.PRODUCT_NAME,
    RANK() OVER (PARTITION BY M.CUSTOMER_ID ORDER BY S.ORDER_DATE) AS RN
FROM
    MEMBERS M
    JOIN SALES S ON M.CUSTOMER_ID = S.CUSTOMER_ID
    JOIN MENU ON S.PRODUCT_ID = MENU.PRODUCT_ID
    WHERE
    S.ORDER_DATE > M.JOIN_DATE
    )
SELECT
    CUSTOMER_ID,
    ORDER_DATE,
    PRODUCT_NAME
FROM
    CTE
WHERE
    RN = 1
ORDER BY
    CUSTOMER_ID;

-- 7. Which item was purchased just before the customer became a member?
WITH CTE_LAST_NON_MEMBER_PURCHASE AS (
    SELECT M.CUSTOMER_ID AS CUSTOMER,
        M2.PRODUCT_NAME AS PRODUCT,
        RANK() OVER (
            PARTITION BY M.CUSTOMER_ID
            ORDER BY S.ORDER_DATE DESC
        ) AS RNK
    FROM MEMBERS AS M
        JOIN SALES AS S ON S.CUSTOMER_ID = M.CUSTOMER_ID
        JOIN MENU AS M2 ON S.PRODUCT_ID = M2.PRODUCT_ID
    WHERE S.ORDER_DATE < M.JOIN_DATE
)
SELECT CUSTOMER,
    PRODUCT
FROM CTE_LAST_NON_MEMBER_PURCHASE
WHERE RNK = 1;

--8. What is the total items and amount spent for each member before they became a member?
SELECT 
	CUSTOMER_ID, 
	SUM(ORDERS) AS TOTAL_ORDERS, 
	SUM(PRICE*ORDERS) AS TOTAL_AMOUNT
FROM (
  SELECT 
  MM.CUSTOMER_ID, 
  JOIN_DATE, 
  ORDER_DATE, 
  COUNT(ORDER_DATE) AS ORDERS, 
  PRICE
  FROM MEMBERS AS MM 
  INNER JOIN SALES AS SS ON MM.CUSTOMER_ID = SS.CUSTOMER_ID
  INNER JOIN MENU AS MU ON SS.PRODUCT_ID=MU.PRODUCT_ID
  WHERE ORDER_DATE < JOIN_DATE
  GROUP BY MM.CUSTOMER_ID, JOIN_DATE, ORDER_DATE, PRICE
) AS ORDERS_BEFORE_MEMBERSHIP
GROUP BY CUSTOMER_ID;


-- 9. If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?
SELECT
    V.CUSTOMER_ID,
    SUM(V.POINTS) AS TOTAL_POINTS
FROM (
    SELECT
        CUSTOMER_ID, 
        PRODUCT_NAME,
        SUM(ORDERS * PRICE) AS TOTAL_AMOUNT,
        CASE 
            WHEN PRODUCT_NAME IN ('curry', 'ramen') THEN SUM(ORDERS * PRICE) * 10 
            WHEN PRODUCT_NAME = 'sushi' THEN SUM(ORDERS * PRICE) * 20 
            ELSE 0 
        END AS POINTS
    FROM 
        CUSTOMER_ORDERS
    GROUP BY 
        CUSTOMER_ID, PRODUCT_NAME
) AS V
GROUP BY
    V.CUSTOMER_ID
ORDER BY TOTAL_POINTS DESC

--10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - 
--how many points do customer A and B have at the end of January?

WITH JAN_ORDER AS (
    SELECT 
        [CUSTOMER_ID],
        [PRODUCT_NAME],
        [JOIN_DATE],
        [ORDER_DATE],
        SUM([ORDERS]) AS TOTAL_ORDER,
        [PRICE]
    FROM 
        [DANNYS_DINER].[dbo].[ORDERS_AFTER_MEMBERSHIP]
    WHERE 
        MONTH(ORDER_DATE) = 1 AND YEAR(ORDER_DATE) = 2021
    GROUP BY 
        CUSTOMER_ID, PRODUCT_NAME, JOIN_DATE, ORDER_DATE, PRICE
),
JAN_POINTS AS (
    SELECT 
        [CUSTOMER_ID],
        [PRODUCT_NAME],
        [JOIN_DATE],
        [ORDER_DATE],
        [TOTAL_ORDER] * 20 AS ORDER_POINTS,
        [PRICE],
        SUM(TOTAL_ORDER * PRICE) AS TOTAL_AMOUNT,
        CASE 
            WHEN PRODUCT_NAME = 'ramen' THEN SUM(TOTAL_ORDER * PRICE) * 10 
            WHEN PRODUCT_NAME = 'sushi' THEN SUM(TOTAL_ORDER * PRICE) * 20 
            ELSE 0 
        END AS POINTS
    FROM 
        JAN_ORDER
    GROUP BY 
        CUSTOMER_ID, PRODUCT_NAME, JOIN_DATE, ORDER_DATE, TOTAL_ORDER, PRICE
)
SELECT 
    [CUSTOMER_ID],
    SUM([ORDER_POINTS] + POINTS) AS TOTAL_JAN_POINTS
FROM 
    JAN_POINTS
GROUP BY 
    CUSTOMER_ID;
